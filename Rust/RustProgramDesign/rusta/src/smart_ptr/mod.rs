// 智能指针
// 引用: 是一类只借用数据的指针, 除了引用数据外没有任何其他特殊功能
// 智能指针:
//  智能指针拥有指向的数据
//  通常使用结构体实现
//  区别于常规结构体的显著特性在于其实现了 Deref 和 Drop trait
//    - Deref(dereference) trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既用于引用、又用于智能指针的代码。
//    - Drop trait 允许我们自定义当智能指针离开作用域时运行的代码

// ---
// Rc<T> 允许相同数据有多个所有者；
// Box<T> 和 RefCell<T> 有单一所有者。
// ---
// Box<T> 允许在编译时执行不可变或可变借用检查；
// Rc<T>仅允许在编译时执行不可变借用检查；
// RefCell<T> 允许在运行时执行不可变或可变借用检查。
// ---
// 因为 RefCell<T> 允许在运行时执行可变借用检查，所以即便在 RefCell<T> 自身是不可变的情况下，可以修改其内部的值。

pub mod r#box;
pub mod rc;
pub mod refcell;
pub mod weak;
