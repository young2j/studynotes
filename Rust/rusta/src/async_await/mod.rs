// Future 在 Rust 中是惰性的，只有在被轮询(poll)时才会运行
// Async 在 Rust 中使用开销是零
// Rust 没有内置异步调用所必须的运行时

// os线程适合少量任务并发、长时间运行的 CPU 密集型任务(并行计算)
// 高并发更适合 IO 密集型任务，例如 web 服务器、数据库连接等等网络服务
// 并发模型的选择原则
//  - 有大量 IO 任务需要并发运行时，选 async 模型
//  - 有部分 IO 任务需要并发运行时，选多线程，如果想要降低线程创建和销毁的开销，可以使用线程池
//  - 有大量 CPU 密集任务需要并行运行时，例如并行计算，选多线程模型，且让线程数等于或者稍大于 CPU 核心数
//  - 无所谓时，统一选多线程

pub mod futures;
mod stream;
mod select;
