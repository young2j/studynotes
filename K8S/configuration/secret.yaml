################################################
## Secret: 用来将机密性的数据保存到键值对中
# - 每个 Secret 的大小最多为 1MiB。
# - data 字段中所有键值都必须是 base64 编码的字符串，
#   而kubelet 为 Pod 及容器提供的是解码后的数据
# - stringData 中的字段可以使用任何字符串作为其取值
# - data/stringData 中每个主键都成为 mountPath 下面的文件名
################################################
# kubectl edit secrets mysecret
## generic 子命令标明要创建的是一个 Opaque 类型 Secret
# kubectl create secret generic empty-secret
# kubectl get secret empty-secret

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
  namespace: default
type: Opaque # 用户定义的任意数据
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
immutable: true

---
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: redis

      ##################################################
      ## 资源请求和限制
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "128Mi"
          cpu: "500m"
      ##################################################
      # 作为容器的环境变量
      envFrom:
        - secretRef:
            name: mysecret
      ##################################################
      # 以环境变量的方式使用 Secret
      env:
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: username
              optional: false # 此值为默认值；意味着 "mysecret"必须存在且包含名为 "username" 的主键
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: password
              optional: false # 此值为默认值；意味着 "mysecret"必须存在且包含名为 "password" 的主键

      ##################################################
      # 挂载的 Secret 是被自动更新的
      # 以 subPath 形式挂载的， 无法收到自动的 ConfigMap 更新。
      volumeMounts:
        - name: foo
          mountPath: "/etc/foo"
          readOnly: true
      ##################################################
  volumes:
    - name: foo
      secret:
        secretName: mysecret
        optional: false # 默认设置，意味着 "mysecret" 必须已经存在

        ###############################################
        defaultMode: 0644 # 指定文件访问权限，默认使用 0644
        ###############################################
        # 使用items更改每个主键的目标路径
        # 只有 items 中指定了的主键会被投射
        items:
          - key: username
            path: my-group/my-username
        ###############################################

---
apiVersion: v1
kind: Secret
metadata:
  name: secret-sa-sample
  annotations:
    kubernetes.io/service-account.name: "sa-name"
type: kubernetes.io/service-account-token
data:
  # 你可以像 Opaque Secret 一样在这里添加额外的键/值偶对
  extra: YmFyCg==

---
apiVersion: v1
kind: Secret
metadata:
  name: secret-dockercfg
type: kubernetes.io/dockercfg
data:
  .dockercfg: |
    "<base64 encoded ~/.dockercfg file>"
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-basic-auth
type: kubernetes.io/basic-auth
stringData:
  username: admin # kubernetes.io/basic-auth 类型的必需字段
  password: t0p-Secret # kubernetes.io/basic-auth 类型的必需字段

---
apiVersion: v1
kind: Secret
metadata:
  name: secret-ssh-auth
type: kubernetes.io/ssh-auth
data:
  # 此例中的实际数据被截断
  ssh-privatekey: |
    MIIEpQIBAAKCAQEAulqb/Y ...
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-tls
type: kubernetes.io/tls
data:
  # 此例中的数据被截断
  tls.crt: |
    MIIC2DCCAcCgAwIBAgIBATANBgkqh ...
  tls.key: |
    MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...
---
apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-token-5emitj
  namespace: kube-system
type: bootstrap.kubernetes.io/token
data:
  auth-extra-groups: c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=
  expiration: MjAyMC0wOS0xM1QwNDozOToxMFo=
  token-id: NWVtaXRq
  token-secret: a3E0Z2lodnN6emduMXAwcg==
  usage-bootstrap-authentication: dHJ1ZQ==
  usage-bootstrap-signing: dHJ1ZQ==
